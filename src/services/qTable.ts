const qTable: Record<string, Record<string, number>> = {
  "0.95": {
    "5": 1.37,
    "6": 1.09,
    "7": 0.92,
    "8": 0.8,
    "9": 0.71,
    "10": 0.65,
    "11": 0.59,
    "12": 0.55,
    "13": 0.52,
    "14": 0.48,
    "15": 0.46,
    "16": 0.44,
    "17": 0.42,
    "18": 0.4,
    "19": 0.39,
    "20": 0.37,
    "25": 0.32,
    "30": 0.28,
    "35": 0.26,
    "40": 0.24,
    "45": 0.22,
    "50": 0.21,
    "60": 0.188,
    "70": 0.174,
    "80": 0.161,
    "90": 0.151,
    "100": 0.143,
    "150": 0.115,
    "200": 0.099,
    "250": 0.089,
  },
  "0.99": {
    "5": 2.67,
    "6": 2.01,
    "7": 1.62,
    "8": 1.38,
    "9": 1.2,
    "10": 1.08,
    "11": 0.98,
    "12": 0.9,
    "13": 0.83,
    "14": 0.78,
    "15": 0.73,
    "16": 0.7,
    "17": 0.66,
    "18": 0.63,
    "19": 0.6,
    "20": 0.58,
    "25": 0.49,
    "30": 0.43,
    "35": 0.38,
    "40": 0.35,
    "45": 0.32,
    "50": 0.3,
    "60": 0.269,
    "70": 0.245,
    "80": 0.226,
    "90": 0.211,
    "100": 0.198,
    "150": 0.16,
    "200": 0.136,
    "250": 0.12,
  },
  "0.999": {
    "5": 5.64,
    "6": 3.88,
    "7": 2.98,
    "8": 2.42,
    "9": 2.06,
    "10": 1.8,
    "11": 1.6,
    "12": 1.45,
    "13": 1.33,
    "14": 1.23,
    "15": 1.15,
    "16": 1.07,
    "17": 1.01,
    "18": 0.96,
    "19": 0.92,
    "20": 0.88,
    "25": 0.73,
    "30": 0.63,
    "35": 0.56,
    "40": 0.5,
    "45": 0.46,
    "50": 0.43,
    "60": 0.38,
    "70": 0.34,
    "80": 0.31,
    "90": 0.29,
    "100": 0.27,
    "150": 0.211,
    "200": 0.185,
    "250": 0.162,
  },
} as const;

export function getQTableValue(gamma: number, n: number): number {
  const gammaKey = gamma.toString();
  const nKey = n.toString();

  // Проверка наличия gamma в таблице
  if (!(gammaKey in qTable)) {
    throw new Error(`Gamma ${gamma} not found in Q-table`);
  }
  // Проверка точного совпадения n
  if (nKey in qTable[gammaKey]) {
    return qTable[gammaKey][nKey];
  }

  // Получаем и сортируем доступные значения n
  const availableNs = Object.keys(qTable[gammaKey])
    .map(Number)
    .sort((a, b) => a - b);

  // Поиск ближайшего меньшего n
  let closestN: number | null = null;
  for (const key of availableNs) {
    if (key <= n) {
      if (closestN === null || key > closestN) {
        closestN = key;
      }
    }
  }

  if (closestN === null) {
    throw new Error(`No suitable n found for gamma ${gamma} and n ${n}`);
  }

  return qTable[gammaKey][closestN.toString()];
}
